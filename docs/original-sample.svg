<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="278.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >"2020-07-27-14:21:24--04:00 cProfile"</text>
<text id="details" x="10.00" y="261" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="261" > </text>
<g id="frames">
<g >
<title>nsxv.py:618:__str__ (16,106 samples, 0.31%)</title><rect x="42.3" y="165" width="3.7" height="15.0" fill="rgb(212,5,8)" rx="2" ry="2" />
<text  x="45.32" y="175.5" ></text>
</g>
<g >
<title>aclgenerator.py:276:__init__ (9,011 samples, 0.18%)</title><rect x="20.2" y="165" width="2.0" height="15.0" fill="rgb(239,98,52)" rx="2" ry="2" />
<text  x="23.16" y="175.5" ></text>
</g>
<g >
<title>~:0:&lt;built-in method posix.read&gt; (5,486 samples, 0.11%)</title><rect x="80.2" y="101" width="1.3" height="15.0" fill="rgb(226,174,48)" rx="2" ry="2" />
<text  x="83.22" y="111.5" ></text>
</g>
<g >
<title>naming.py:455:GetNet (10,902 samples, 0.21%)</title><rect x="68.2" y="53" width="2.5" height="15.0" fill="rgb(205,67,42)" rx="2" ry="2" />
<text  x="71.24" y="63.5" ></text>
</g>
<g >
<title>aclgen.py:420:DescendRecursively (5,624 samples, 0.11%)</title><rect x="76.9" y="165" width="1.3" height="15.0" fill="rgb(233,173,46)" rx="2" ry="2" />
<text  x="79.95" y="175.5" ></text>
</g>
<g >
<title>sre_compile.py:759:compile (5,281 samples, 0.10%)</title><rect x="56.0" y="69" width="1.2" height="15.0" fill="rgb(210,10,45)" rx="2" ry="2" />
<text  x="59.01" y="79.5" ></text>
</g>
<g >
<title>sre_compile.py:759:compile (5,455 samples, 0.11%)</title><rect x="47.4" y="85" width="1.2" height="15.0" fill="rgb(247,95,18)" rx="2" ry="2" />
<text  x="50.35" y="95.5" ></text>
</g>
<g >
<title>lex.py:862:lex (46,913 samples, 0.92%)</title><rect x="46.4" y="149" width="10.8" height="15.0" fill="rgb(249,122,33)" rx="2" ry="2" />
<text  x="49.41" y="159.5" ></text>
</g>
<g >
<title>naming.py:441:GetNetAddr (6,915 samples, 0.14%)</title><rect x="66.3" y="85" width="1.6" height="15.0" fill="rgb(244,97,17)" rx="2" ry="2" />
<text  x="69.31" y="95.5" ></text>
</g>
<g >
<title>managers.py:516:start (8,164 samples, 0.16%)</title><rect x="79.6" y="165" width="1.9" height="15.0" fill="rgb(244,166,14)" rx="2" ry="2" />
<text  x="82.60" y="175.5" ></text>
</g>
<g >
<title>lex.py:728:validate_rules (36,571 samples, 0.71%)</title><rect x="48.8" y="117" width="8.4" height="15.0" fill="rgb(209,31,36)" rx="2" ry="2" />
<text  x="51.80" y="127.5" ></text>
</g>
<g >
<title>lex.py:493:_form_master_re (6,324 samples, 0.12%)</title><rect x="47.2" y="133" width="1.4" height="15.0" fill="rgb(239,16,40)" rx="2" ry="2" />
<text  x="50.15" y="143.5" ></text>
</g>
<g >
<title>copy.py:220:&lt;listcomp&gt; (17,542 samples, 0.34%)</title><rect x="29.9" y="133" width="4.1" height="15.0" fill="rgb(251,100,7)" rx="2" ry="2" />
<text  x="32.92" y="143.5" ></text>
</g>
<g >
<title>yacc.py:325:parse (58,672 samples, 1.15%)</title><rect x="57.2" y="149" width="13.5" height="15.0" fill="rgb(250,139,11)" rx="2" ry="2" />
<text  x="60.23" y="159.5" ></text>
</g>
<g >
<title>aclgen.py:501:Run (309,581 samples, 6.05%)</title><rect x="12.3" y="197" width="71.3" height="15.0" fill="rgb(219,174,27)" rx="2" ry="2" />
<text  x="15.25" y="207.5" >aclgen.p..</text>
</g>
<g >
<title>lex.py:305:token (12,911 samples, 0.25%)</title><rect x="62.6" y="117" width="3.0" height="15.0" fill="rgb(241,227,12)" rx="2" ry="2" />
<text  x="65.60" y="127.5" ></text>
</g>
<g >
<title>copy.py:236:_deepcopy_dict (18,251 samples, 0.36%)</title><rect x="34.0" y="149" width="4.2" height="15.0" fill="rgb(240,154,2)" rx="2" ry="2" />
<text  x="36.97" y="159.5" ></text>
</g>
<g >
<title>connection.py:483:Client (6,655 samples, 0.13%)</title><rect x="82.1" y="149" width="1.5" height="15.0" fill="rgb(250,69,40)" rx="2" ry="2" />
<text  x="85.07" y="159.5" ></text>
</g>
<g >
<title>&lt;frozen importlib._bootstrap&gt;:948:_find_and_load_unlocked (5,686 samples, 0.11%)</title><rect x="78.3" y="149" width="1.3" height="15.0" fill="rgb(232,71,21)" rx="2" ry="2" />
<text  x="81.29" y="159.5" ></text>
</g>
<g >
<title>~:0:&lt;method 'match' of 're.Pattern' objects&gt; (18,696 samples, 0.37%)</title><rect x="51.6" y="85" width="4.3" height="15.0" fill="rgb(222,9,54)" rx="2" ry="2" />
<text  x="54.58" y="95.5" ></text>
</g>
<g >
<title>policy.py:1013:AddObject (11,250 samples, 0.22%)</title><rect x="68.2" y="85" width="2.5" height="15.0" fill="rgb(238,180,40)" rx="2" ry="2" />
<text  x="71.16" y="95.5" ></text>
</g>
<g >
<title>lex.py:576:validate_all (37,385 samples, 0.73%)</title><rect x="48.6" y="133" width="8.6" height="15.0" fill="rgb(224,5,5)" rx="2" ry="2" />
<text  x="51.61" y="143.5" ></text>
</g>
<g >
<title>lex.py:831:validate_module (29,289 samples, 0.57%)</title><rect x="49.1" y="101" width="6.8" height="15.0" fill="rgb(239,29,28)" rx="2" ry="2" />
<text  x="52.14" y="111.5" ></text>
</g>
<g >
<title>aclgen.py:587:main (5,119,988 samples, 100.00%)</title><rect x="10.0" y="213" width="1180.0" height="15.0" fill="rgb(242,104,21)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >aclgen.py:587:main</text>
</g>
<g >
<title>connection.py:374:_recv (5,639 samples, 0.11%)</title><rect x="80.2" y="117" width="1.3" height="15.0" fill="rgb(207,225,53)" rx="2" ry="2" />
<text  x="83.18" y="127.5" ></text>
</g>
<g >
<title>managers.py:783:_callmethod (6,461 samples, 0.13%)</title><rect x="18.7" y="133" width="1.5" height="15.0" fill="rgb(247,124,20)" rx="2" ry="2" />
<text  x="21.68" y="143.5" ></text>
</g>
<g >
<title>aclgen.py:366:RenderACL (12,155 samples, 0.24%)</title><rect x="17.4" y="165" width="2.8" height="15.0" fill="rgb(246,28,37)" rx="2" ry="2" />
<text  x="20.36" y="175.5" ></text>
</g>
<g >
<title>connection.py:406:_recv_bytes (6,345 samples, 0.12%)</title><rect x="73.8" y="117" width="1.5" height="15.0" fill="rgb(252,36,10)" rx="2" ry="2" />
<text  x="76.80" y="127.5" ></text>
</g>
<g >
<title>connection.py:246:recv (5,938 samples, 0.12%)</title><rect x="80.1" y="149" width="1.4" height="15.0" fill="rgb(246,84,43)" rx="2" ry="2" />
<text  x="83.11" y="159.5" ></text>
</g>
<g >
<title>cisco.py:641:__str__ (5,521 samples, 0.11%)</title><rect x="22.3" y="149" width="1.3" height="15.0" fill="rgb(221,157,53)" rx="2" ry="2" />
<text  x="25.31" y="159.5" ></text>
</g>
<g >
<title>connection.py:374:_recv (6,217 samples, 0.12%)</title><rect x="73.8" y="101" width="1.5" height="15.0" fill="rgb(229,95,30)" rx="2" ry="2" />
<text  x="76.83" y="111.5" ></text>
</g>
<g >
<title>connection.py:246:recv (6,551 samples, 0.13%)</title><rect x="73.8" y="133" width="1.5" height="15.0" fill="rgb(210,118,29)" rx="2" ry="2" />
<text  x="76.75" y="143.5" ></text>
</g>
<g >
<title>managers.py:783:_callmethod (8,737 samples, 0.17%)</title><rect x="73.2" y="149" width="2.1" height="15.0" fill="rgb(233,83,14)" rx="2" ry="2" />
<text  x="76.25" y="159.5" ></text>
</g>
<g >
<title>re.py:271:_compile (5,742 samples, 0.11%)</title><rect x="55.9" y="85" width="1.3" height="15.0" fill="rgb(244,62,42)" rx="2" ry="2" />
<text  x="58.90" y="95.5" ></text>
</g>
<g >
<title>context.py:48:Manager (14,039 samples, 0.27%)</title><rect x="78.2" y="181" width="3.3" height="15.0" fill="rgb(211,215,17)" rx="2" ry="2" />
<text  x="81.24" y="191.5" ></text>
</g>
<g >
<title>minidom.py:1964:parseString (6,481 samples, 0.13%)</title><rect x="43.2" y="149" width="1.5" height="15.0" fill="rgb(232,168,5)" rx="2" ry="2" />
<text  x="46.21" y="159.5" ></text>
</g>
<g >
<title>copy.py:132:deepcopy (16,800 samples, 0.33%)</title><rect x="34.3" y="133" width="3.9" height="15.0" fill="rgb(223,89,50)" rx="2" ry="2" />
<text  x="37.30" y="143.5" ></text>
</g>
<g >
<title>copy.py:132:deepcopy (17,497 samples, 0.34%)</title><rect x="29.9" y="117" width="4.1" height="15.0" fill="rgb(245,91,29)" rx="2" ry="2" />
<text  x="32.93" y="127.5" ></text>
</g>
<g >
<title>nsxv.py:125:__str__ (5,758 samples, 0.11%)</title><rect x="44.7" y="149" width="1.3" height="15.0" fill="rgb(217,212,28)" rx="2" ry="2" />
<text  x="47.70" y="159.5" ></text>
</g>
<g >
<title>policy.py:405:__init__ (12,350 samples, 0.24%)</title><rect x="67.9" y="101" width="2.8" height="15.0" fill="rgb(250,87,15)" rx="2" ry="2" />
<text  x="70.90" y="111.5" ></text>
</g>
<g >
<title>threading.py:1038:_wait_for_tstate_lock (4,800,604 samples, 93.76%)</title><rect x="83.6" y="181" width="1106.4" height="15.0" fill="rgb(251,208,5)" rx="2" ry="2" />
<text  x="86.61" y="191.5" >threading.py:1038:_wait_for_tstate_lock</text>
</g>
<g >
<title>aclgen.py:488:DiscoverAllPolicies (6,477 samples, 0.13%)</title><rect x="76.8" y="181" width="1.4" height="15.0" fill="rgb(249,36,44)" rx="2" ry="2" />
<text  x="79.75" y="191.5" ></text>
</g>
<g >
<title>all (5,119,988 samples, 100%)</title><rect x="10.0" y="229" width="1180.0" height="15.0" fill="rgb(224,75,19)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>copy.py:268:_reconstruct (17,994 samples, 0.35%)</title><rect x="38.2" y="149" width="4.1" height="15.0" fill="rgb(220,204,18)" rx="2" ry="2" />
<text  x="41.17" y="159.5" ></text>
</g>
<g >
<title>managers.py:579:_create (7,181 samples, 0.14%)</title><rect x="81.9" y="165" width="1.7" height="15.0" fill="rgb(241,184,42)" rx="2" ry="2" />
<text  x="84.95" y="175.5" ></text>
</g>
<g >
<title>copy.py:132:deepcopy (81,301 samples, 1.59%)</title><rect x="23.6" y="165" width="18.7" height="15.0" fill="rgb(217,39,13)" rx="2" ry="2" />
<text  x="26.58" y="175.5" ></text>
</g>
<g >
<title>copy.py:132:deepcopy (16,897 samples, 0.33%)</title><rect x="26.0" y="133" width="3.9" height="15.0" fill="rgb(252,209,4)" rx="2" ry="2" />
<text  x="29.01" y="143.5" ></text>
</g>
<g >
<title>cisco.py:1232:__str__ (5,819 samples, 0.11%)</title><rect x="22.2" y="165" width="1.4" height="15.0" fill="rgb(219,90,50)" rx="2" ry="2" />
<text  x="25.24" y="175.5" ></text>
</g>
<g >
<title>re.py:271:_compile (5,931 samples, 0.12%)</title><rect x="47.2" y="101" width="1.4" height="15.0" fill="rgb(247,50,19)" rx="2" ry="2" />
<text  x="50.24" y="111.5" ></text>
</g>
<g >
<title>&lt;string&gt;:1:__getitem__ (8,793 samples, 0.17%)</title><rect x="73.2" y="165" width="2.1" height="15.0" fill="rgb(237,19,37)" rx="2" ry="2" />
<text  x="76.23" y="175.5" ></text>
</g>
<g >
<title>policy.py:2525:ParsePolicy (107,248 samples, 2.09%)</title><rect x="46.0" y="165" width="24.7" height="15.0" fill="rgb(211,222,20)" rx="2" ry="2" />
<text  x="49.03" y="175.5" >p..</text>
</g>
<g >
<title>policy.py:1013:AddObject (7,838 samples, 0.15%)</title><rect x="66.1" y="101" width="1.8" height="15.0" fill="rgb(237,132,28)" rx="2" ry="2" />
<text  x="69.10" y="111.5" ></text>
</g>
<g >
<title>threading.py:1000:join (4,800,625 samples, 93.76%)</title><rect x="83.6" y="197" width="1106.4" height="15.0" fill="rgb(252,45,18)" rx="2" ry="2" />
<text  x="86.60" y="207.5" >threading.py:1000:join</text>
</g>
<g >
<title>connection.py:406:_recv_bytes (5,755 samples, 0.11%)</title><rect x="80.2" y="133" width="1.3" height="15.0" fill="rgb(244,16,44)" rx="2" ry="2" />
<text  x="83.15" y="143.5" ></text>
</g>
<g >
<title>naming.py:441:GetNetAddr (10,953 samples, 0.21%)</title><rect x="68.2" y="69" width="2.5" height="15.0" fill="rgb(210,59,54)" rx="2" ry="2" />
<text  x="71.22" y="79.5" ></text>
</g>
<g >
<title>re.py:232:compile (5,943 samples, 0.12%)</title><rect x="47.2" y="117" width="1.4" height="15.0" fill="rgb(247,207,49)" rx="2" ry="2" />
<text  x="50.24" y="127.5" ></text>
</g>
<g >
<title>copy.py:210:_deepcopy_list (18,031 samples, 0.35%)</title><rect x="25.7" y="149" width="4.2" height="15.0" fill="rgb(216,161,38)" rx="2" ry="2" />
<text  x="28.75" y="159.5" ></text>
</g>
<g >
<title>aclgen.py:478:_WriteFile (6,470 samples, 0.13%)</title><rect x="75.3" y="165" width="1.5" height="15.0" fill="rgb(215,64,32)" rx="2" ry="2" />
<text  x="78.26" y="175.5" ></text>
</g>
<g >
<title>managers.py:699:temp (9,214 samples, 0.18%)</title><rect x="81.5" y="181" width="2.1" height="15.0" fill="rgb(206,6,14)" rx="2" ry="2" />
<text  x="84.48" y="191.5" ></text>
</g>
<g >
<title>naming.py:455:GetNet (6,882 samples, 0.13%)</title><rect x="66.3" y="69" width="1.6" height="15.0" fill="rgb(218,145,23)" rx="2" ry="2" />
<text  x="69.32" y="79.5" ></text>
</g>
<g >
<title>&lt;frozen importlib._bootstrap&gt;:978:_find_and_load (5,816 samples, 0.11%)</title><rect x="78.3" y="165" width="1.3" height="15.0" fill="rgb(207,17,37)" rx="2" ry="2" />
<text  x="81.26" y="175.5" ></text>
</g>
<g >
<title>nacaddr.py:29:IP (6,438 samples, 0.13%)</title><rect x="69.3" y="37" width="1.4" height="15.0" fill="rgb(233,166,50)" rx="2" ry="2" />
<text  x="72.27" y="47.5" ></text>
</g>
<g >
<title>copy.py:132:deepcopy (17,261 samples, 0.34%)</title><rect x="38.3" y="133" width="4.0" height="15.0" fill="rgb(251,1,25)" rx="2" ry="2" />
<text  x="41.34" y="143.5" ></text>
</g>
<g >
<title>&lt;string&gt;:1:append (6,526 samples, 0.13%)</title><rect x="18.7" y="149" width="1.5" height="15.0" fill="rgb(219,111,22)" rx="2" ry="2" />
<text  x="21.66" y="159.5" ></text>
</g>
<g >
<title>policy.py:1912:p_term_spec (22,438 samples, 0.44%)</title><rect x="65.6" y="117" width="5.1" height="15.0" fill="rgb(213,18,43)" rx="2" ry="2" />
<text  x="68.58" y="127.5" ></text>
</g>
<g >
<title>~:0:&lt;method 'read' of '_io.TextIOWrapper' objects&gt; (10,060 samples, 0.20%)</title><rect x="70.7" y="165" width="2.4" height="15.0" fill="rgb(241,16,21)" rx="2" ry="2" />
<text  x="73.75" y="175.5" ></text>
</g>
<g >
<title>re.py:232:compile (5,821 samples, 0.11%)</title><rect x="55.9" y="101" width="1.3" height="15.0" fill="rgb(229,150,7)" rx="2" ry="2" />
<text  x="58.89" y="111.5" ></text>
</g>
<g >
<title>~:0:&lt;built-in method posix.read&gt; (6,049 samples, 0.12%)</title><rect x="73.9" y="85" width="1.4" height="15.0" fill="rgb(248,117,21)" rx="2" ry="2" />
<text  x="76.87" y="95.5" ></text>
</g>
<g >
<title>aclgen.py:166:RenderFile (260,027 samples, 5.08%)</title><rect x="13.1" y="181" width="60.0" height="15.0" fill="rgb(252,61,48)" rx="2" ry="2" />
<text  x="16.14" y="191.5" >aclgen..</text>
</g>
<g >
<title>aclgen.py:464:WriteFiles (15,985 samples, 0.31%)</title><rect x="73.1" y="181" width="3.7" height="15.0" fill="rgb(239,1,18)" rx="2" ry="2" />
<text  x="76.07" y="191.5" ></text>
</g>
<g >
<title>copy.py:219:_deepcopy_tuple (17,640 samples, 0.34%)</title><rect x="29.9" y="149" width="4.1" height="15.0" fill="rgb(236,83,15)" rx="2" ry="2" />
<text  x="32.90" y="159.5" ></text>
</g>
<g >
<title>yacc.py:1003:parseopt_notrack (58,617 samples, 1.14%)</title><rect x="57.2" y="133" width="13.5" height="15.0" fill="rgb(213,10,47)" rx="2" ry="2" />
<text  x="60.24" y="143.5" ></text>
</g>
<g >
<title>~:0:&lt;method 'acquire' of '_thread.lock' objects&gt; (4,800,555 samples, 93.76%)</title><rect x="83.6" y="165" width="1106.4" height="15.0" fill="rgb(226,145,44)" rx="2" ry="2" />
<text  x="86.62" y="175.5" >~:0:&lt;method 'acquire' of '_thread.lock' objects&gt;</text>
</g>
<g >
<title>connection.py:736:answer_challenge (5,376 samples, 0.11%)</title><rect x="82.4" y="133" width="1.2" height="15.0" fill="rgb(240,161,46)" rx="2" ry="2" />
<text  x="85.36" y="143.5" ></text>
</g>
</g>
</svg>
